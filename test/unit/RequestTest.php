<?php

declare(strict_types=1);

namespace BitWasp\Test\PinEntry;

use BitWasp\PinEntry\Request;

class RequestTest extends TestCase
{
    /**
     * @var Request
     */
    private $request;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->request = new Request();
    }

    public function testSetDesc()
    {
        $desc = "Some description";
        $this->assertFalse($this->request->hasDesc());
        $this->assertNull($this->request->getDesc());

        $this->request->withDesc($desc);
        $this->assertTrue($this->request->hasDesc());
        $this->assertEquals($desc, $this->request->getDesc());
    }
    public function testSetPrompt()
    {
        $prompt = "Please enter the pin";
        $this->assertFalse($this->request->hasPrompt());
        $this->assertNull($this->request->getPrompt());

        $this->request->withPrompt($prompt);
        $this->assertTrue($this->request->hasPrompt());
        $this->assertEquals($prompt, $this->request->getPrompt());
    }
    public function testSetKeyInfo()
    {
        $keyInfo = "123123123";
        $this->assertFalse($this->request->hasKeyInfo());
        $this->assertNull($this->request->getKeyInfo());

        $this->request->withKeyInfo($keyInfo);
        $this->assertTrue($this->request->hasKeyInfo());
        $this->assertEquals($keyInfo, $this->request->getKeyInfo());
    }
    public function testSetRepeat()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasRepeat());
        $this->assertNull($this->request->getRepeat());

        $this->request->withRepeat($prompt);
        $this->assertTrue($this->request->hasRepeat());
        $this->assertEquals($prompt, $this->request->getRepeat());
    }
    public function testSetRepeatError()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasRepeatError());
        $this->assertNull($this->request->getRepeatError());

        $this->request->withRepeatError($prompt);
        $this->assertTrue($this->request->hasRepeatError());
        $this->assertEquals($prompt, $this->request->getRepeatError());
    }
    public function testSetError()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasError());
        $this->assertNull($this->request->getError());

        $this->request->withError($prompt);
        $this->assertTrue($this->request->hasError());
        $this->assertEquals($prompt, $this->request->getError());
    }
    public function testSetOkButton()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasOkButton());
        $this->assertNull($this->request->getOkButton());

        $this->request->withOkButton($prompt);
        $this->assertTrue($this->request->hasOkButton());
        $this->assertEquals($prompt, $this->request->getOkButton());
    }
    public function testSetNotOk()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasNotOk());
        $this->assertNull($this->request->getNotOk());

        $this->request->withNotOk($prompt);
        $this->assertTrue($this->request->hasNotOk());
        $this->assertEquals($prompt, $this->request->getNotOk());
    }
    public function testSetCancelButton()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasCancelButton());
        $this->assertNull($this->request->getCancelButton());

        $this->request->withCancelButton($prompt);
        $this->assertTrue($this->request->hasCancelButton());
        $this->assertEquals($prompt, $this->request->getCancelButton());
    }
    public function testSetTitle()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasTitle());
        $this->assertNull($this->request->getTitle());

        $this->request->withTitle($prompt);
        $this->assertTrue($this->request->hasTitle());
        $this->assertEquals($prompt, $this->request->getTitle());
    }
    public function testSetTimeout()
    {
        $prompt = 2;
        $this->assertFalse($this->request->hasTimeout());
        $this->assertNull($this->request->getTimeout());

        $this->request->withTimeout($prompt);
        $this->assertTrue($this->request->hasTimeout());
        $this->assertEquals($prompt, $this->request->getTimeout());
    }
    public function testSetQualityBar()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasQualityBar());
        $this->assertNull($this->request->getQualityBar());

        $this->request->withQualityBar($prompt);
        $this->assertTrue($this->request->hasQualityBar());
        $this->assertEquals($prompt, $this->request->getQualityBar());
    }
    public function testSetQualityBarTooltip()
    {
        $prompt = "123123123";
        $this->assertFalse($this->request->hasQualityBarTooltip());
        $this->assertNull($this->request->getQualityBarTooltip());

        $this->request->withQualityBarTooltip($prompt);
        $this->assertTrue($this->request->hasQualityBarTooltip());
        $this->assertEquals($prompt, $this->request->getQualityBarTooltip());
    }
    public function testGetCommands()
    {
        $this->request->withTitle("this title");
        $this->request->withDesc("this desc");
        $commands = $this->request->getCommands();
        $this->assertCount(2, $commands);
        $this->assertArrayHasKey("SETTITLE", $commands);
        $this->assertArrayHasKey("SETDESC", $commands);
    }
    public function testWithUsePasswordCacheOption()
    {
        $prompt = "123123123";
        $option = 'allow-external-password-cache';

        $this->assertFalse($this->request->hasOption($option));
        $this->assertNull($this->request->getOption($option));

        $this->request->withOption($option, $prompt);
        $this->assertTrue($this->request->hasOption($option));
        $this->assertEquals($prompt, $this->request->getOption($option));
    }
    public function testGetOptions()
    {
        $option1 = 'allow-external-password-cache';

        $this->request->withOption($option1, "");
        $options = $this->request->getOptions();
        $this->assertArrayHasKey($option1, $options);
    }
}
